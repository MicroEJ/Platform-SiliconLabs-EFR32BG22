.. 
	Copyright 2019-2021 MicroEJ Corp. All rights reserved.
	This library is provided in source code for use, modification and test, subject to license terms.
	Any modification of the source code will break MicroEJ Corp. warranties on the whole library.

.. |BOARD_NAME| replace:: Thunderboard EFR32BG22
.. |BOARD_REVISION| replace:: A01
.. |PLATFORM_VER| replace:: 0.2.0
.. |RCP| replace:: MICROEJ SDK
.. |PLATFORM| replace:: MicroEJ Platform
.. |PLATFORMS| replace:: MicroEJ Platforms
.. |SIM| replace:: MicroEJ Simulator
.. |ARCH| replace:: MicroEJ Architecture
.. |CIDE| replace:: MICROEJ SDK
.. |RTOS| replace:: Micrium RTOS
.. |MANUFACTURER| replace:: Silicon Labs

.. _README: ./../../../README.rst
.. _RELEASE NOTES: ./../../../RELEASE_NOTES.rst
.. _CHANGELOG: ./../../../CHANGELOG.rst

================
|BOARD_NAME| BSP
================

This project contains the BSP sources of the |PLATFORM| for the
|BOARD_NAME|.

This document does not describe how to setup the |PLATFORM|.  Please
refer to the `README`_ for that.

BSP setup
=========

The ``projects/microej/SimplicityStudio`` contains a Simplicity Studio project used for generating necessary files and configurations.

.. note::
 The generated files are licensed under Silicon Labs Master Software License Agreement (MSLA) and we cannot provide them.
 The files and the configurations have to be generated as described below.

Generating files
----------------

- In ``Project Explorer`` tab, click ``Import projects...``.
- ``Select a project to import`` -> ``Browse`` -> Choose the folder ``projects/microej/SimplicityStudio``.
- Click ``Next`` twice.
- Uncheck ``Use default location`` -> ``Browse`` -> Choose the folder ``projects/microej/SimplicityStudio``.
- Click ``Finish``.
- Open microej.slcp
- Click ``Force generation`` button:
  Folders autogen, config and gecko_sdk_3.0.0 and files microej.ewd, microej.ewp and microej.eww will be generated.

Configuring software components
-------------------------------
- ``SOFTWARE COMPONENTS`` tab -> ``RTOS`` -> ``Micrium OS`` -> ``Common`` -> ``Micrium OS Common Module Core`` -> Push the "Configure" button

   In *Memory Library Configuration*:

   - Set ``Size of heap memory (in octets)`` to **3072**
   
   In *Asserts Configuration*:

   - Check ``Externalize module configurations via const value instead of using Configure functions``
   
   In *RTOS Error Configuration*:
   
   - Uncheck ``Extended error type``

- ``SOFTWARE COMPONENTS`` tab -> ``RTOS`` -> ``Micrium OS``  -> ``Kernel`` -> ``Micrium OS Kernel`` -> Push the ``Configure`` button.

   In *Miscellaneous Configuration*:

   - Uncheck ``Add debug helper code and variable``
   - Uncheck ``Add timestamping capabilities``
   - Uncheck ``Enable Round-Robin scheduling``

   In *Event Flags Configuration*:

   - Uncheck ``Enable event flags``

   In *Message Queues Configuration*: 

   - Uncheck ``Enable queues``

   In *Monitors Configuration*:

   - Uncheck ``Enable monitors``
   
   In *Task Management Configuration*:

   - Uncheck ``Enable statistics gathering task``
   - Uncheck ``Enable stack overflow detection of the statistics task``
   - Uncheck ``Enable task profiling instrumentation``
   - Uncheck ``Enable task message queues``
   - Uncheck ``Enable redzone stack protection``
   - Set ``Depth of the redzone stack protection`` to **0**

   In *Timer Management Configuration*:

   - Check ``Enable software timers``


- ``SOFTWARE COMPONENTS`` tab -> ``Platform`` -> ``Toolchain`` -> ``Memory Configuration`` -> Push the ``Configure`` button.

   In *Memory configuration*:

   - Set ``Stack size for the application`` to **512**
   - Set ``Minimum heap size for the application.`` to **0**

Configuring IAR Embedded Workbench project
------------------------------------------
- Open IAR Embedded Workbench IDE and open the workspace generated by Simplicity Studio:

 - ``File`` -> ``Open Workspace...`` -> Choose ``projects/microej/SimplicityStudio/microej.eww`` -> ``Open``

- Add a new group, named ``microej``, to the project

 - Add ``core`` and ``platform`` folders with all subfolders to the ``microej`` group.

- Add *platform* and *core* include folders to the preprocessor list:

 - Right click on the project -> ``Options`` -> ``C/C++ Compiler`` -> ``Preprocessor`` -> Add **$PROJ_DIR$\\..\\core\\inc** and **$PROJ_DIR$\\..\\platform\\inc** to the include list

- Configure options: Right click on the project -> ``Options``

   *General Options*:

   - ``Library Configuration`` -> ``Library``: **Full**
   - ``Library Configuration`` -> For ``Library low-level interface implementation`` choose **Semihosted** and check ``Use CMSIS``
   - ``Target`` -> Set ``Trust Zone Mode`` to **Non-secure**

   *C/C++ Compiler*:

   - ``List`` -> Check ``Output assembler file``, ``Include source`` and ``Include call frame information``
   - ``Extra Options`` -> Uncheck ``Use command line options``
   - ``Optimizations`` -> Check ``Loop unrolling`` and ``Static clustering``
   - ``Preprocessor`` -> Check ``Preprocessor output to file``, ``Preserve comments`` and ``Generate #line directives``

   *Linker*:

   - ``Extra Options`` -> Check ``Use command line options`` and add **--no_range_reservations** to the list
   - ``Library`` -> Uncheck ``Override default program entry``
   - ``Optimizations`` -> Check ``Inline small routines``, ``Merge duplicate sections``, ``Perform C++ Virtual Function Elimination`` and ``Even if some modules are missing VFE information``
   - ``List`` -> Check ``Generate linker map file``, ``Automatic library selection``, ``Stack usage call graph``, ``Redirected symbols`` and ``Unused section frames``

Build & Flash Scripts
=====================

In the folder ``Project/microej/scripts/`` are scripts that can be
used to build and flash the BSP.

- The ``build.bat`` script is used to compile and link the BSP with a
  MicroEJ Application to produce a MicroEJ Firmware
  (``microej.out``) that can be flashed on a device.

  The ``build.bat`` script works out of the box, assuming the environment 
  variable IAREW_INSTALLATION_DIR is set.

- The ``run.bat`` script is used to flash a MicroEJ Firmware
  (``microej.out``) on a device.

The following environment variables are customizable: 

- ``IAREW_INSTALLATION_DIR``: The path to IAR installation directory (already set to the default IAR Workbench default installation directory).
- ``IAREW_PROJECT_CONFIGURATION``: The project configuration (``Debug`` or ``Release``).
- ``IAREW_PROJECT_DIR``: The directory that contains the ``microej.eww`` IAR project file (set to ``%~dp0``: the directory that contains the executed ``.bat``).
- ``IAREW_PROJECT_NAME``: The Eclipse CDT project name (``microej`` by default).

The environment variables can be defined globally by the user or in
the ``set_local_env.bat`` scripts.  When the ``.bat`` scripts
are executed, the ``set_local_env.bat`` script is executed if it exists.
Configure these files to customize the environment locally.

Debugging with the |BOARD_NAME|
===============================

- Open the IAR project in IAR Workbench (open the file ``-bsp/projects/microej/SimplicityStudio/microej.eww`` from IAR Workbench or by double-clicking on it from the MicroEJ SDK).
- Ensure that the ``Debug`` target is selected in the workspace tab
- Build and link the firmware: Right-click on the ``microej`` project > ``Make`` or Press 'F7'
- Connect the |BOARD_NAME| to your computer
- Start the debug session by clicking on ``Project`` > ``Download and Debug``

